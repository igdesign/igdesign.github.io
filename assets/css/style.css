@charset "UTF-8";
/* -- $FUNCTIONS --                         */
/* em($px) - convert px to ems              */
/* -- Colors */
/* ---- Cool */
/* ---- Warm */
/* ---- Gray Scale */
/* -- Gutters */
/* -- Typography */
/* -- Sizes */
/* -- Breakpoints */
/* -- Libraries  */
/* ---- Typecsset */
/* ---- Grids */
/* @group
   -- $EXTENDS --                                                             */
.site-nav__list, .footer-nav__list, .footer__copyright {
  margin: 0;
  padding: 0; }

.site-nav__list, .footer-nav__list {
  list-style: none; }

/* @end extend */
/* @group
   -- $MIXINS --                                                              */
/* @end mixins */
/**
 * Typecsset
 *
 * Typecsset is a small, unopinionated library for creating beautifully set type
 * on the web. Typecsset gives perfect vertical rhythm at any configurable font
 * size, as well as many other typographical niceties.
 */
/*------------------------------------*\
    #SHARED
\*------------------------------------*/
/**
 * A lot of elements in Typecsset need to share some declarations (mainly for
 * vertical rhythm), so we `@extend` some silent classes.
 */
h1, h2, h3, h4, h5, h6, ul, ol, dd, p, address, pre, blockquote, table {
  margin: 0;
  padding: 0; }

h1, h2, h3, h4, h5, h6, ul, ol, dd, p, address, pre, blockquote, table {
  margin-bottom: 21px;
  margin-bottom: 1.3125rem; }

/*------------------------------------*\
    #BASE
\*------------------------------------*/
/**
 * 1. Set the base element’s `font-size` to the value of your choosing. Set in
 *    ems, assuming a browser default of 16px.
 * 2. Work out the unitless `line-height` for your project based around your
 *    desired `line-height` (defined previously in pixels), and your project’s
 *    base font size.
 */
html {
  font-size: 1em;
  /* [1] */
  line-height: 1.3125;
  /* [2] */ }

body {
  margin: 0; }

/*------------------------------------*\
    #HEADINGS
\*------------------------------------*/
h1 {
  font-size: 48px;
  font-size: 3rem;
  line-height: 1.3125; }

h2 {
  font-size: 36px;
  font-size: 2.25rem;
  line-height: 1.16667; }

h3 {
  font-size: 30px;
  font-size: 1.875rem;
  line-height: 1.4; }

h4 {
  font-size: 24px;
  font-size: 1.5rem;
  line-height: 1.75; }

h5 {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.05; }

h6 {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.16667; }

/*------------------------------------*\
    #LISTS
\*------------------------------------*/
ul, ol, dd {
  margin-left: 42px;
  margin-left: 2.625rem; }

li > ul,
li > ol {
  margin-bottom: 0; }

/*------------------------------------*\
    #PARAGRAPHS
\*------------------------------------*/
/**
 * Not strictly a paragraph, but probably doesn’t need its own section.
 */
/*------------------------------------*\
    #CODE
\*------------------------------------*/
/**
 * 1. Fix an odd quirk whereby, without this, code blocks are rendered at a
 *    font-size smaller than 1em.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  /* [1] */ }

/*------------------------------------*\
    #QUOTES
\*------------------------------------*/
/**
 * 1. Hang the opening quote of the blockquote.
 */
blockquote {
  text-indent: -0.41em;
  /* [1] */ }

/**
 * Set up quote marks on quoting elements. This is very English-based, so we are
 * using “, ”, ‘, and ’ quotes.
 */
blockquote {
  quotes: "“" "”";
  margin-left: 42px;
  margin-left: 2.625rem; }
  blockquote p:before {
    content: "“";
    content: open-quote; }
  blockquote p:after {
    content: "";
    content: no-close-quote; }
  blockquote p:last-of-type:after {
    content: "”";
    content: close-quote; }

q {
  quotes: "‘" "’" "“" "”";
  /**
   * If an element opens with an inline quote, let’s hang that.
   */ }
  q:before {
    content: "‘";
    content: open-quote; }
  q:after {
    content: "’";
    content: close-quote; }
  q q:before {
    content: "“";
    content: open-quote; }
  q q:after {
    content: "”";
    content: close-quote; }
  q:first-child {
    display: inline-block;
    text-indent: -0.22em; }

/*------------------------------------*\
    #TABLES
\*------------------------------------*/
/**
 * Crude table styles; tables are very difficult to keep on the baseline.
 */
table {
  width: 100%;
  border-collapse: collapse;
  border-spacing: 0; }

th,
td {
  padding: 10.5px; }

/*------------------------------------*\
    $CSSWIZARDRY-GRIDS
\*------------------------------------*/
/**
 * CONTENTS
 * INTRODUCTION.........How the grid system works.
 * VARIABLES............Your settings.
 * MIXINS...............Library mixins.
 * GRID SETUP...........Build the grid structure.
 * WIDTHS...............Build our responsive widths around our breakpoints.
 * PUSH.................Push classes.
 * PULL.................Pull classes.
 */
/*------------------------------------*\
    $INTRODUCTION
\*------------------------------------*/
/**
 * csswizardry grids provides you with widths to suit a number of breakpoints
 * designed around devices of a size you specify. Out of the box, csswizardry
 * grids caters to the following types of device:
 *
 * palm     --  palm-based devices, like phones and small tablets
 * lap      --  lap-based devices, like iPads or laptops
 * portable --  all of the above
 * desk     --  stationary devices, like desktop computers
 * regular  --  any/all types of device
 *
 * These namespaces are then used in the library to give you the ability to
 * manipulate your layouts based around them, for example:
 *
   <div class="grid__item  one-whole  lap--one-half  desk--one-third">
 *
 * This would give you a grid item which is 100% width unless it is on a lap
 * device, at which point it become 50% wide, or it is on a desktop device, at
 * which point it becomes 33.333% width.
 *
 * csswizardry grids also has push and pull classes which allow you to nudge
 * grid items left and right by a defined amount. These follow the same naming
 * convention as above, but are prepended by either `push--` or `pull--`, for
 * example:
 *
   `class="grid__item  one-half  push--one-half"`
 *
 * This would give you a grid item which is 50% width and pushed over to the
 * right by 50%.
 *
 * All classes in csswizardry grids follow this patten, so you should fairly
 * quickly be able to piece together any combinations you can imagine, for
 * example:
 *
   `class="grid__item  one-whole  lap--one-half  desk--one-third  push--desk--one-third"`
 *
   `class="grid__item  one-quarter  palm--one-half  push--palm--one-half"`
 *
   `class="grid__item  palm--one-third  desk--five-twelfths"`
 */
/*------------------------------------*\
    $VARIABLES
\*------------------------------------*/
/**
 * If you are building a non-responsive site but would still like to use
 * csswizardry-grids, set this to ‘false’:
 */
/**
 * Is this build mobile first? Setting to ‘true’ means that all grids will be
 * 100% width if you do not apply a more specific class to them.
 */
/**
 * Set the spacing between your grid items.
 */
/**
 * Would you like Sass’ silent classes, or regular CSS classes?
 */
/**
 * Would you like push and pull classes enabled?
 */
/**
 * This grid uses flex-box for browsers that support it and falls back to `inline-block`.
 * `Using `inline-block` means that the grid items need their whitespace removed in order for them to work 
 * correctly. Set the following to true if you are going to achieve this by manually removing/commenting out
 * any whitespace in your HTML yourself.
 *
 * Setting this to false invokes a hack which cannot always be guaranteed,
 * please see the following for more detail:
 *
 * github.com/csswizardry/csswizardry-grids/commit/744d4b23c9d2b77d605b5991e54a397df72e0688
 * github.com/csswizardry/inuit.css/issues/170#issuecomment-14859371
 */
/**
 * Define your breakpoints. The first value is the prefix that shall be used for
 * your classes (e.g. `.palm--one-half`), the second value is the media query
 * that the breakpoint fires at.
 */
/**
 * Define which namespaced breakpoints you would like to generate for each of
 * widths, push and pull. This is handy if you only need pull on, say, desk, or
 * you only need a new width breakpoint at mobile sizes. It allows you to only
 * compile as much CSS as you need. All are turned on by default, but you can
 * add and remove breakpoints at will.
 *
 * Push and pull shall only be used if `$grid__push` and/or `$grid__pull` and `$grid__responsive`
 * have been set to ‘true’.
 */
/**
 * You do not need to edit anything from this line onward; csswizardry-grids is
 * good to go. Happy griddin’!
 */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * These mixins are for the library to use only, you should not need to modify
 * them at all.
 *
 * Enclose a block of code with a media query as named in `$grid__breakpoints`.
 */
/**
 * Drop relative positioning into silent classes which can’t take advantage of
 * the `[class*="push--"]` and `[class*="pull--"]` selectors.
 */
/*------------------------------------*\
    $GRID SETUP
\*------------------------------------*/
/**
 * 1. Use (new) flex-box if supported.
 * 2. Allow the grid system to be used on lists.
 * 3. Remove any margins and paddings that might affect the grid system.
 * 4. Apply a negative `margin-left` to negate the columns’ gutters.
 * 5. Use standard grid on Firefox < 28 because it does not support flex-flow
 */
.digital__wrapper, .magazines__features,
.website__features {
  display: -webkit-flex;
  /* [1] */
  display: -ms-flexbox;
  /* [1] */
  display: flex;
  /* [1] */
  -webkit-flex-flow: row wrap;
  /* [1] */
  -ms-flex-flow: row wrap;
  /* [1] */
  flex-flow: row wrap;
  /* [1] */
  list-style: none;
  /* [2] */
  margin: 0;
  /* [3] */
  padding: 0;
  /* [3] */
  margin-left: -24px;
  /* [4] */ }
  @supports not (flex-wrap: wrap) {
    .digital__wrapper, .magazines__features,
    .website__features {
      /* [5] */
      display: block; } }

/**
 * 1. Cause columns to stack side-by-side.
 * 2. Space columns apart.
 * 3. Align columns to the tops of each other.
 * 4. Full-width unless told to behave otherwise.
 * 5. Required to combine fluid widths and fixed gutters.
 */
.magazines__digital .digital__wrapper p, .features__block, .magazines__features h2,
.website__features h2 {
  display: inline-block;
  /* [1] */
  padding-left: 24px;
  /* [2] */
  vertical-align: top;
  /* [3] */
  width: 100%;
  /* [4] */
  -webkit-box-sizing: border-box;
  /* [5] */
  -moz-box-sizing: border-box;
  /* [5] */
  box-sizing: border-box;
  /* [5] */ }

/**
 * Reversed grids allow you to structure your source in the opposite order to
 * how your rendered layout will appear. Extends `.grid`.
 */
/**
 * Gutterless grids have all the properties of regular grids, minus any spacing.
 * Extends `.grid`.
 */
/**
 * Align the entire grid to the right. Extends `.grid`.
 */
/**
 * Centered grids align grid items centrally without needing to use push or pull
 * classes. Extends `.grid`.
 */
/**
 * Align grid cells vertically (`.grid--middle` or `.grid--bottom`). Extends
 * `.grid`.
 */
/**
 * Create grids with narrower gutters. Extends `.grid`.
 */
/**
 * Create grids with wider gutters. Extends `.grid`.
 */
/*------------------------------------*\
    $WIDTHS
\*------------------------------------*/
/**
 * Create our width classes, prefixed by the specified namespace.
 */
/**
 * Our regular, non-responsive width classes.
 */
/**
 * Whole
 */
.magazines__features h2,
.website__features h2, .magazines__features .features__block:nth-of-type(5), .website__features .features__block:nth-of-type(7) {
  width: 100%; }

/**
 * Halves
 */
/**
 * Thirds
 */
.magazines__digital .digital__wrapper p {
  width: 33.333%; }

/**
 * Quarters
 */
/**
 * Fifths
 */
/**
 * Sixths
 */
/**
 * Eighths
 */
/**
 * Tenths
 */
/**
 * Twelfths
 */
/**
 * Our responsive classes, if we have enabled them.
 */
@media only screen and (max-width: 18.75em) {
  /**
   * Whole
   */
  .features__block {
    width: 100%; }

  /**
   * Halves
   */
  /**
   * Thirds
   */
  /**
   * Quarters
   */
  /**
   * Fifths
   */
  /**
   * Sixths
   */
  /**
   * Eighths
   */
  /**
   * Tenths
   */
  /**
   * Twelfths
   */ }
@media only screen and (min-width: 30.00625em) and (max-width: 64em) {
  /**
   * Whole
   */
  /**
   * Halves
   */
  /**
   * Thirds
   */
  /**
   * Quarters
   */
  /**
   * Fifths
   */
  /**
   * Sixths
   */
  /**
   * Eighths
   */
  /**
   * Tenths
   */
  /**
   * Twelfths
   */ }
@media only screen and (max-width: 64em) {
  /**
   * Whole
   */
  /**
   * Halves
   */
  /**
   * Thirds
   */
  /**
   * Quarters
   */
  /**
   * Fifths
   */
  /**
   * Sixths
   */
  /**
   * Eighths
   */
  /**
   * Tenths
   */
  /**
   * Twelfths
   */ }
@media only screen and (min-width: 64.00625em) {
  /**
   * Whole
   */
  /**
   * Halves
   */
  .features__block {
    width: 50%; }

  /**
   * Thirds
   */
  /**
   * Quarters
   */
  /**
   * Fifths
   */
  /**
   * Sixths
   */
  /**
   * Eighths
   */
  /**
   * Tenths
   */
  /**
   * Twelfths
   */ }
/*------------------------------------*\
    $PUSH
\*------------------------------------*/
/**
 * Push classes, to move grid items over to the right by certain amounts.
 */
/*------------------------------------*\
    $PULL
\*------------------------------------*/
/**
 * Pull classes, to move grid items back to the left by certain amounts.
 */
/*! normalize.css v3.0.0 | MIT License | git.io/normalize */
html {
  font-family: sans-serif;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%; }

body {
  margin: 0; }

article, aside, details, figcaption, figure, footer, header, hgroup, main, nav, section, summary {
  display: block; }

audio, canvas, progress, video {
  display: inline-block;
  vertical-align: baseline; }

audio:not([controls]) {
  display: none;
  height: 0; }

[hidden], template {
  display: none; }

a {
  background: transparent; }

a:active, a:hover {
  outline: 0; }

abbr[title] {
  border-bottom: 1px dotted; }

b, strong {
  font-weight: bold; }

dfn {
  font-style: italic; }

h1 {
  font-size: 2em;
  margin: .67em 0; }

mark {
  background: #ff0;
  color: #000; }

small {
  font-size: 80%; }

sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

img {
  border: 0; }

svg:not(:root) {
  overflow: hidden; }

figure {
  margin: 1em 40px; }

hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0; }

pre {
  overflow: auto; }

code, kbd, pre, samp {
  font-family: monospace,monospace;
  font-size: 1em; }

button, input, optgroup, select, textarea {
  color: inherit;
  font: inherit;
  margin: 0; }

button {
  overflow: visible; }

button, select {
  text-transform: none; }

button, html input[type="button"], input[type="reset"], input[type="submit"] {
  -webkit-appearance: button;
  cursor: pointer; }

button[disabled], html input[disabled] {
  cursor: default; }

button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0;
  padding: 0; }

input {
  line-height: normal; }

input[type="checkbox"], input[type="radio"] {
  box-sizing: border-box;
  padding: 0; }

input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

input[type="search"] {
  -webkit-appearance: textfield;
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  box-sizing: content-box; }

input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: .35em .625em .75em; }

legend {
  border: 0;
  padding: 0; }

textarea {
  overflow: auto; }

optgroup {
  font-weight: bold; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

td, th {
  padding: 0; }

*,
*:before,
*:after {
  box-sizing: border-box; }

body {
  font-weight: 200; }

blockquote {
  padding-left: 20px;
  position: relative;
  margin-left: 0; }
  blockquote:before, blockquote:after {
    content: '';
    height: 100px;
    width: 100px;
    position: absolute;
    z-index: -1; }
  blockquote:before {
    background-color: green;
    top: 0;
    left: 0; }
  blockquote:after {
    background-color: red;
    right: 0;
    bottom: 0; }

ul,
ol {
  margin-left: 24px;
  list-style-position: outside; }

table {
  border-collapse: collapse; }

td,
th {
  border: 1px solid #111111;
  padding: 6px; }

th {
  vertical-align: bottom; }

tfoot {
  font-size: 12px;
  text-align: center; }

h1,
h2,
h3,
h4,
h5,
h6 {
  padding: 0; }

a {
  color: #0054a4; }
  a:hover, a:focus {
    color: #7fdbff; }
  a:active {
    color: #001f3f; }

h1 {
  text-align: center;
  font-size: 28.424px; }
  h1:after {
    content: '';
    width: 100%;
    height: 1px;
    display: block;
    background: -moz-linear-gradient(left, transparent 0%, rgba(0, 0, 0, 0.1) 50%, transparent 100%);
    background: -webkit-linear-gradient(left, transparent 25%, rgba(0, 0, 0, 0.1) 50%, transparent 75%);
    background: -o-linear-gradient(left, transparent 25%, rgba(0, 0, 0, 0.1) 50%, transparent 75%);
    background: -ms-linear-gradient(left, transparent 25%, rgba(0, 0, 0, 0.1) 50%, transparent 75%);
    background: linear-gradient(to right, transparent 25%, rgba(0, 0, 0, 0.1) 50%, transparent 75%);
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000', endColorstr='#00000000',GradientType=1 ); }

h2 {
  font-size: 21px; }
  h2:before {
    content: '\25B6';
    width: 21px;
    height: 21px;
    font-size: 16px;
    display: inline-block;
    color: #ff4136; }

h3 {
  font-size: 16px;
  font-weight: 800;
  margin-bottom: 0; }

em {
  color: #555555; }

dt {
  font-weight: 400;
  font-style: italic; }

dd {
  margin-left: 0; }

body {
  width: 80%;
  margin: 10% auto 2%;
  max-width: 1920px;
  box-sizing: border-box;
}

img {
  max-width: 100%; }

.table-wrapper {
  width: 100%;
  overflow-x: scroll; }

.site-nav {
  position: absolute;
  top: 0;
  right: 0;
  left: 0;
  text-align: right;
  padding: 12px; }
  .site-nav__item {
    display: inline-block; }

.footer-nav, .footer-nav--small {
  position: absolute;
  top: 0;
  right: 0; }
  .footer-nav__item {
    display: inline-block; }

.footer-nav--small {
  font-size: 12px; }

.footer {
  position: relative; }
  .footer__copyright {
    font-size: 12px; }

.magazines__digital {
  width: 100%; }

.magazines__digital .digital__wrapper p {
  display: inline-block; }
.magazines__digital img {
  box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.3); }

.features {
  background-color: blue; }
